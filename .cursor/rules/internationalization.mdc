---
description: 
globs: 
alwaysApply: false
---
# 国际化开发规则

## 国际化架构
项目使用@nuxtjs/i18n实现完整的中英文国际化支持。

## 核心配置
- **国际化配置**: [nuxt.config.ts](mdc:nuxt.config.ts)
- **中文语言包**: [locale/zh.ts](mdc:locale/zh.ts)
- **英文语言包**: [locale/en.ts](mdc:locale/en.ts)
- **语言切换器**: [components/LanguageSwitcher.vue](mdc:components/LanguageSwitcher.vue)

## 支持语言
- **中文** (zh): 默认语言
- **英文** (en): 备选语言

## 配置结构
```typescript
i18n: {
  locales: [
    { code: 'zh', name: '中文', file: 'zh.ts' },
    { code: 'en', name: 'English', file: 'en.ts' }
  ],
  defaultLocale: 'zh',
  langDir: 'locale/',
  strategy: 'no_prefix'
}
```

## 翻译键值结构
### 导航部分 (nav)
- `nav.home` - 首页
- `nav.tools` - 工具
- `nav.features` - 功能
- `nav.tryFree` - 免费试用
- `nav.logout` - 退出登录

### 认证部分 (auth)
- `auth.login` - 登录
- `auth.register` - 注册
- `auth.email` - 邮箱
- `auth.password` - 密码
- `auth.name` - 姓名

### API文档部分 (apiDocs)
- `apiDocs.title` - API 文档
- `apiDocs.description` - 查看完整的 API 接口文档

### 错误信息 (error)
- `error.login_failed` - 登录失败
- `error.invalid_credentials` - 用户名或密码错误
- `error.network_error` - 网络错误

## 使用规范
### 在模板中使用
```vue
<template>
  <h1>{{ $t('hero.title') }}</h1>
  <p>{{ $t('hero.description') }}</p>
</template>
```

### 在脚本中使用
```javascript
const { t } = useI18n()
const title = computed(() => t('page.title'))
```

### 动态翻译
```javascript
const localizedFeatures = computed(() => [
  {
    title: t('features.latest_ai'),
    description: t('features.latest_ai_desc')
  }
])
```

## 本地存储
- 语言选择自动保存到localStorage
- 页面刷新后保持用户选择

## 开发规范
- 所有用户可见文本必须国际化
- 翻译键使用点分割命名法
- 保持中英文翻译内容一致性
- 新增功能必须同时添加中英文翻译
- 优先确保中文翻译的准确性

## SEO支持
- 自动设置页面lang属性
- 支持多语言meta标签
- 搜索引擎友好的URL结构
